{"version":3,"file":"index.module.js","sources":["../src/index.js"],"sourcesContent":["import { Controller } from '@hotwired/stimulus';\nimport './index.scss';\n\nexport default class extends Controller {\n  static values = {\n    mode: String\n  };\n\n  get groups() {\n    return this.scope.findAllElements('[data-form-group-id]');\n  }\n\n  get togglers() {\n    return this.context.bindingObserver.bindings\n               .filter(binding => binding.action.methodName == 'toggle')\n               .map(binding => binding.action.element);\n  }\n\n  connect() {\n    this.enableTrans(false);\n    this.toggleGroups();\n    setTimeout(() => this.enableTrans(true), 200);\n  }\n\n  enableTrans(enabled) {\n    if (enabled) {\n      this.element.classList.remove('st-form-groups--disable-trans')\n    } else {\n      this.element.classList.add('st-form-groups--disable-trans')\n    }\n  }\n\n  toggle(e) {\n    this.toggleGroups();\n  }\n\n  toggleGroups() {\n    let targetGroups = this.togglers.flatMap(toggler => this.findGroups(toggler));\n    this.groups.forEach(group => this.toggleGroup(group, targetGroups.includes(group)));\n  }\n\n  toggleGroup(group, flag) {\n    if (this.modeValue == 'disabled') {\n      return this.toggleDisabled(group, flag);\n    } else {\n      return this.toggleVisible(group, flag);\n    }\n  }\n\n  toggleVisible(group, visible) {\n    if (visible) {\n      group.style.height = group.scrollHeight + 'px';\n      group.classList.add('st-form-groups__group--visible');\n    } else {\n      group.style.height = '0px';\n      group.classList.remove('st-form-groups__group--visible');\n    }\n  }\n\n  toggleDisabled(group, enabled) {\n    this.inputElements(group).forEach(elem => elem.disabled = !enabled);\n  }\n\n  inputElements(group) {\n    return group.querySelectorAll('input, select, textarea, button')\n  }\n\n  findGroups(toggler) {\n    let value = this.getValue(toggler);\n    if (!value) {\n      return [];\n    } else {\n      return this.groups.filter(group => this.isMatch(group, toggler.name, value));\n    }\n  }\n\n  getValue(toggler) {\n    if (toggler.matches('select')) {\n      return toggler.options[toggler.selectedIndex].value;\n    } else if (toggler.matches('input[type=checkbox]')) {\n      return toggler.checked ? toggler.value : null;\n    } else if (toggler.matches('input[type=radio]')) {\n      let checked = this.scope.findElement(`input[type=radio][name=\"${toggler.name}\"]:checked`);\n      return checked ? checked.value : null;\n    }\n  }\n\n  isMatch(group, togglerName, togglerValue) {\n    let set = new GroupIDSet(group.getAttribute('data-form-group-id'));\n    return set.nameValues.some(([name, value]) => {\n      return (!name || name == togglerName) && value == togglerValue\n    });\n  }\n}\n\nclass GroupIDSet {\n  constructor(idset) {\n    this.idset = idset;\n    this.ids = this.parse(idset);\n  }\n\n  get nameValues() {\n    return this.ids.map(id => this.parseID(id));\n  }\n\n  parse(idset) {\n    if (idset.startsWith('[')) {\n      return [].concat(this.parseJSON(idset));\n    } else {\n      return [].concat(idset);\n    }\n  }\n\n  parseID(id) {\n    if (id.includes(':')) {\n      return id.split(':', 2)\n    } else {\n      return [null, id];\n    }\n  }\n\n  parseJSON(str) {\n    try {\n      return JSON.parse(str);\n    } catch(error) {\n      return str;\n    }\n  }\n}\n"],"names":["Controller","groups","scope","findAllElements","togglers","context","bindingObserver","bindings","filter","binding","action","methodName","map","element","connect","this","enableTrans","toggleGroups","setTimeout","enabled","classList","remove","add","toggle","e","targetGroups","flatMap","toggler","findGroups","forEach","group","toggleGroup","includes","flag","modeValue","toggleDisabled","toggleVisible","visible","style","height","scrollHeight","inputElements","elem","disabled","querySelectorAll","value","getValue","isMatch","name","matches","options","selectedIndex","checked","findElement","togglerName","togglerValue","GroupIDSet","getAttribute","nameValues","some","_ref","values","mode","String","constructor","idset","ids","parse","id","parseID","startsWith","concat","parseJSON","split","str","JSON","error"],"mappings":"gEAG6BA,EAKvBC,aACF,YAAYC,MAAMC,gBAAgB,wBAGhCC,eACF,YAAYC,QAAQC,gBAAgBC,SACxBC,OAAOC,GAAwC,UAA7BA,EAAQC,OAAOC,YACjCC,IAAIH,GAAWA,EAAQC,OAAOG,SAG5CC,UACEC,KAAKC,aAAY,GACjBD,KAAKE,eACLC,WAAW,IAAMH,KAAKC,aAAY,GAAO,KAG3CA,YAAYG,GACNA,EACFJ,KAAKF,QAAQO,UAAUC,OAAO,iCAE9BN,KAAKF,QAAQO,UAAUE,IAAI,iCAI/BC,OAAOC,GACLT,KAAKE,eAGPA,eACE,IAAIQ,EAAeV,KAAKX,SAASsB,QAAQC,GAAWZ,KAAKa,WAAWD,IACpEZ,KAAKd,OAAO4B,QAAQC,GAASf,KAAKgB,YAAYD,EAAOL,EAAaO,SAASF,KAG7EC,YAAYD,EAAOG,GACjB,MAAsB,YAAlBlB,KAAKmB,eACKC,eAAeL,EAAOG,QAEtBG,cAAcN,EAAOG,GAIrCG,cAAcN,EAAOO,GACfA,GACFP,EAAMQ,MAAMC,OAAST,EAAMU,aAAe,KAC1CV,EAAMV,UAAUE,IAAI,oCAEpBQ,EAAMQ,MAAMC,OAAS,MACrBT,EAAMV,UAAUC,OAAO,mCAI3Bc,eAAeL,EAAOX,GACpBJ,KAAK0B,cAAcX,GAAOD,QAAQa,GAAQA,EAAKC,UAAYxB,GAG7DsB,cAAcX,GACZ,OAAOA,EAAMc,iBAAiB,mCAGhChB,WAAWD,GACT,IAAIkB,EAAQ9B,KAAK+B,SAASnB,GAC1B,OAAKkB,OAGS5C,OAAOO,OAAOsB,GAASf,KAAKgC,QAAQjB,EAAOH,EAAQqB,KAAMH,IAF9D,GAMXC,SAASnB,GACP,GAAIA,EAAQsB,QAAQ,UAClB,OAAOtB,EAAQuB,QAAQvB,EAAQwB,eAAeN,SACrClB,EAAQsB,QAAQ,wBACzB,OAAOtB,EAAQyB,QAAUzB,EAAQkB,MAAQ,QAChClB,EAAQsB,QAAQ,qBAAsB,CAC/C,IAAIG,EAAUrC,KAAKb,MAAMmD,uCAAuC1B,EAAQqB,mBACxE,OAAOI,EAAUA,EAAQP,MAAQ,MAIrCE,QAAQjB,EAAOwB,EAAaC,GAE1B,OADU,IAAIC,EAAW1B,EAAM2B,aAAa,uBACjCC,WAAWC,KAAKC,QAAEZ,EAAMH,KACjC,QAASG,GAAQA,GAAQM,IAAgBT,GAASU,OAtF/CM,OAAS,CACdC,KAAMC,QA0FV,MAAMP,EACJQ,YAAYC,GACVlD,KAAKkD,MAAQA,EACblD,KAAKmD,IAAMnD,KAAKoD,MAAMF,GAGpBP,iBACF,YAAYQ,IAAItD,IAAIwD,GAAMrD,KAAKsD,QAAQD,IAGzCD,MAAMF,GACJ,OAAIA,EAAMK,WAAW,KACZ,GAAGC,OAAOxD,KAAKyD,UAAUP,IAEzB,GAAGM,OAAON,GAIrBI,QAAQD,GACN,OAAIA,EAAGpC,SAAS,KACPoC,EAAGK,MAAM,IAAK,GAEd,CAAC,KAAML,GAIlBI,UAAUE,GACR,IACE,OAAOC,KAAKR,MAAMO,GAClB,MAAME,GACN,OAAOF"}