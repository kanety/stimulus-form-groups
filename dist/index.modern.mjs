import{Controller as t}from"@hotwired/stimulus";class e extends t{get groups(){return this.scope.findAllElements("[data-form-group-id]")}get togglers(){return this.context.bindingObserver.bindings.filter(t=>"toggle"==t.action.methodName).map(t=>t.action.element)}connect(){this.toggleGroups(!1)}toggle(t){this.toggleGroups()}toggleGroups(t=!0){let e=this.togglers.flatMap(t=>this.findGroups(t));this.groups.forEach(s=>{e.includes(s)?this.on(s,t):this.off(s,t)})}on(t,e=!0){"disabled"==this.modeValue?this.enable(t):this.show(t,e)}off(t,e=!0){"disabled"==this.modeValue?this.disable(t):this.hide(t,e)}show(t,e=!0){t.classList.contains("st-form-groups__group--visible")||(e&&(t.style.height="0px",t.removeEventListener("transitionend",this.transitionEnd),t.addEventListener("transitionend",this.transitionEnd),setTimeout(()=>{t.style.height=t.scrollHeight+"px"})),t.classList.add("st-form-groups__group--visible"))}hide(t,e=!0){t.classList.contains("st-form-groups__group--visible")&&(e&&(t.style.height=t.scrollHeight+"px",t.removeEventListener("transitionend",this.transitionEnd),t.addEventListener("transitionend",this.transitionEnd),setTimeout(()=>{t.style.height="0px"})),t.classList.remove("st-form-groups__group--visible"))}transitionEnd(t){t.target.style.height=""}enable(t){this.toggleDisabled(t,!0)}disable(t){this.toggleDisabled(t,!1)}toggleDisabled(t,e){this.inputElements(t).forEach(t=>t.disabled=!e)}inputElements(t){return t.querySelectorAll("input, select, textarea, button")}findGroups(t){let e=this.getValue(t);return e?this.groups.filter(s=>this.isMatch(s,t.name,e)):[]}getValue(t){if(t.matches("select"))return t.options[t.selectedIndex].value;if(t.matches("input[type=checkbox]"))return t.checked?t.value:null;if(t.matches("input[type=radio]")){let e=this.scope.findElement(`input[type=radio][name="${t.name}"]:checked`);return e?e.value:null}}isMatch(t,e,i){return new s(t.getAttribute("data-form-group-id")).nameValues.some(([t,s])=>(!t||t==e)&&s==i)}}e.values={mode:String};class s{constructor(t){this.idset=t,this.ids=this.parse(t)}get nameValues(){return this.ids.map(t=>this.parseID(t))}parse(t){return t.startsWith("[")?[].concat(this.parseJSON(t)):[].concat(t)}parseID(t){return t.includes(":")?t.split(":",2):[null,t]}parseJSON(t){try{return JSON.parse(t)}catch(e){return t}}}export{e as default};
//# sourceMappingURL=index.modern.mjs.map
